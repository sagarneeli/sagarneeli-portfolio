name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          frontend/jest.config.js
          frontend/jest.setup.js
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run linting
      working-directory: frontend
      run: npm run lint
      
    - name: Type check
      working-directory: frontend
      run: npm run type-check
      
    - name: Run unit tests
      working-directory: frontend
      run: npm run test:ci
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Build application
      working-directory: frontend
      run: npm run build

  # Frontend E2E Tests
  frontend-e2e:
    name: Frontend E2E Tests
    runs-on: ubuntu-latest
    needs: frontend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          frontend/jest.config.js
          frontend/jest.setup.js
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps
      
    - name: Start frontend server
      working-directory: frontend
      run: npm run dev &
      
    - name: Wait for server
      run: sleep 30
      
    - name: Run E2E tests
      working-directory: frontend
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: backend
      env:
        PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run linting
      working-directory: backend
      run: |
        ruff check .
        ruff format --check .
        mypy app/
        
    - name: Run tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build frontend image
      run: |
        docker build -f frontend/Dockerfile -t sagarneeli-portfolio-frontend:test ./frontend
        
    - name: Build backend image
      run: |
        docker build -f backend/Dockerfile -t sagarneeli-portfolio-backend:test ./backend
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [frontend-tests, backend-tests, security-scan, docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment steps here
        # Example: Deploy to Vercel, Heroku, or other platforms
